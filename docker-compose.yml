version: '3.8'

services:
  db:
    image: postgres:15-alpine  # Используем Alpine-образ для экономии места
    restart: unless-stopped    # Более гибкая политика перезапуска
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - '${POSTGRES_PORT}:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]  # Используем переменную из .env
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - infoMFSS

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: >
      bash -c "
      python manage.py wait_for_db &&
      python manage.py migrate &&
      python manage.py create_users &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120
      "
    volumes:
      - static_volume:/app/static  # Выносим статику в отдельный volume
      - media_volume:/app/media    # Выносим медиа в отдельный volume
    ports:
      - '8000:8000'
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      - infoMFSS

  nginx: # Добавляем Nginx для production
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./static:/app/static:ro,uid=101,gid=101
      - ./media:/app/media:ro,uid=101,gid=101
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Важно!
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app
    networks:
      - infoMFSS

volumes:
  pg_data:
  static_volume:
  media_volume:

networks:
  infoMFSS:
    driver: bridge