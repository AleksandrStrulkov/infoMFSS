services:
  db:
    image: postgres:15-alpine  # Используем Alpine-образ для экономии места
    restart: unless-stopped    # Более гибкая политика перезапуска
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - '${POSTGRES_PORT}:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]  # Используем переменную из .env
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - infoMFSS-networks

  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - static_volume:/app/static  # Выносим статику в отдельный volume
      - media_volume:/app/media    # Выносим медиа в отдельный volume
 #   ports:
  #    - '8000:8000'
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
    networks:
      - infoMFSS-networks

  nginx: # Добавляем Nginx для production
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - static_volume:/app/static_collected
      - media_volume:/app/media
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Важно!
    depends_on:
      - web
    networks:
      - infoMFSS-networks

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  infoMFSS-networks:
    driver: bridge